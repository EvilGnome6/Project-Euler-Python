#-*- encoding: utf-8 -*-
#If we are presented with the first k terms of a sequence it is impossible to say with certainty the value of the next term, as there are infinitely many polynomial functions that can model the sequence.

#As an example, let us consider the sequence of cube numbers. This is defined by the generating function,
#u(n) = n^3: 1, 8, 27, 64, 125, 216, ...

#Suppose we were only given the first two terms of this sequence. Working on the principle that "simple is best" we should assume a linear relationship and predict the next term to be 15 (common difference 7). Even if we were presented with the first three terms, by the same principle of simplicity, a quadratic relationship should be assumed.

#We shall define OP(k, n) to be the nth term of the optimum polynomial generating function for the first k terms of a sequence. It should be clear that OP(k, n) will accurately generate the terms of the sequence for n ≤ k, and potentially the first incorrect term (FIT) will be OP(k, k+1); in which case we shall call it a bad OP (BOP).

#As a basis, if we were only given the first term of sequence, it would be most sensible to assume constancy; that is, for n ≥ 2, OP(1, n) = u1.

#Hence we obtain the following OPs for the cubic sequence:
#OP(1, n) = 1 	1, 1, 1, 1, ...
#OP(2, n) = 7n−6 	1, 8, 15, ...
#OP(3, n) = 6n^2−11n+6      	1, 8, 27, 58, ...
#OP(4, n) = n^3 	1, 8, 27, 64, 125, ...

#Clearly no BOPs exist for k ≥ 4.

#By considering the sum of FITs generated by the BOPs (indicated in red above), we obtain 1 + 15 + 58 = 74.

#Consider the following tenth degree polynomial generating function:

#u(n) = 1 − n + n^2 − n^3 + n^4 − n^5 + n^6 − n^7 + n^8 − n^9 + n^10

#Find the sum of FITs for the BOPs.

def function(n):
	return 1 - n + n**2 - n**3 + n**4 - n**5 + n**6 - n**7 + n**8 - n**9 + n**10

sequence = []
for n in range(1, 12):
	sequence.append(function(n))

#Build a difference table. http://www.algebra.com/cgi-bin/embed-solution.mpl?show=1&solution=114216

def getdiffrow(sequence):
	diffrow = []
	for i in range(len(sequence)-1):
		diffrow.append(sequence[i+1] - sequence[i])
	return diffrow

def getdifftable(sequence):
	difftable = []
	difftable.append(sequence)
	for i in range(len(sequence)-1):
		difftable.append(getdiffrow(difftable[i]))
		if len(difftable[-1]) == 1 or difftable[-1][0] == difftable[-1][1]: break
	return difftable
	
difftable = getdifftable(sequence)

#sum the bottom-left to top-right diagonals of the difference table to generate a list of FITs
 
fitlist = []
for i in range(len(difftable)-1):
	fit = 0
	for j in range(i+1):
		r, c = j, (i-j)
		fit += difftable[r][c]
	fitlist.append(fit)

print sum(fitlist)
